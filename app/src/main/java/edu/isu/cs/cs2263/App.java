/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs.cs2263;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.Optional;
import java.util.Vector;

import static java.lang.System.exit;

public class App extends Application {

    private Vector<Course> allCourses = new Vector<>();

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {

        courseInputLayout(stage);
    }

    public void courseInputLayout(Stage stage){
        VBox dptName = new VBox(10);
        ComboBox<String> myBox = new ComboBox<>();
        ObservableList<String> obsList = FXCollections.observableArrayList(Course.getDptNames());
        myBox.setItems(obsList);
        dptName.getChildren().addAll(new Label("Department Name"), myBox);

        VBox crsNum = new VBox(10);
        TextField courseNum = new TextField();
        crsNum.getChildren().addAll(new Label("Course Number"), courseNum);

        VBox crsName = new VBox(10);
        TextField courseName = new TextField();
        crsName.getChildren().addAll(new Label("Course Name"), courseName);

        VBox nmCred = new VBox(10);
        TextField numCredits = new TextField();
        nmCred.getChildren().addAll(new Label("Number of Credits"), numCredits);

        HBox topLayer = new HBox(10);
        topLayer.getChildren().addAll(dptName, crsNum, crsName, nmCred);

        Button enterData = new Button("Enter");
        Button dispAll = new Button("Display All");
        Button dispDept = new Button("Display <Department>");
        Button exitButton = new Button("Exit");

        HBox bottomLayer = new HBox(10);
        bottomLayer.getChildren().addAll(enterData, dispAll, dispDept, exitButton);

        VBox fullLayout = new VBox(10);
        fullLayout.getChildren().addAll(topLayer, bottomLayer);

        Scene scene = new Scene(fullLayout, 595, 200);
        stage.setTitle("Course View");
        stage.setScene(scene);
        stage.show();

        myBox.setOnAction((event) -> {
            String selItem = myBox.getSelectionModel().getSelectedItem();
            dispDept.setText("Display all " + selItem);
        });

        enterData.setOnAction((event) -> {
            enterCourse(myBox.getSelectionModel().getSelectedItem(), courseNum.getText(), courseName.getText(), numCredits.getText());
            courseNum.setText(""); courseName.setText(""); numCredits.setText("");
        });

        dispAll.setOnAction((event) -> {
            allCourseLayout(stage);
        });

        exitButton.setOnAction((event) -> {
            exitProgram();
        });

        dispDept.setOnAction((event) -> {
            String deptFullName = myBox.getSelectionModel().getSelectedItem();
            if(deptFullName == null){
                Alert a = new Alert(Alert.AlertType.ERROR);
                a.setContentText("No Department Selected. Please select a department before continuing.");
                a.show();
                return;
            }
            oneDeptCourseLayout(stage, Course.getDepartmentCode(deptFullName));
        });

    }

    public void allCourseLayout(Stage stage){
        ListView<Course> listView = new ListView<Course>();

        ObservableList<Course> courseList = FXCollections.observableArrayList(allCourses);
        listView.setItems(courseList);

        VBox rightBox = new VBox(10);
        Button toInput = new Button("Back to Input");
        Button exitButton = new Button("Exit");
        rightBox.getChildren().addAll(toInput, exitButton);

        HBox fullLayout = new HBox(10);
        fullLayout.getChildren().addAll(listView, rightBox);

        Scene scene = new Scene(fullLayout, 595, 200);
        stage.setTitle("Course View");
        stage.setScene(scene);
        stage.show();

        toInput.setOnAction((event) -> {
            courseInputLayout(stage);
        });

        exitButton.setOnAction((event) -> {
            exitProgram();
        });
    }

    public void oneDeptCourseLayout(Stage stage, String deptCode){
        // Retrieve the Courses corresponding to the correct deptCode
        Vector<Course> specificCourses = new Vector<>();
        for (Course course : allCourses){
            if(course.getDepartment().equals(deptCode)){
                specificCourses.add(course);
            }
        }
        // Set up the stage and show
        ListView<Course> listView = new ListView<Course>();

        ObservableList<Course> courseList = FXCollections.observableArrayList(specificCourses);
        listView.setItems(courseList);

        VBox rightBox = new VBox(10);
        Button toInput = new Button("Back to Input");
        Button toLayoutAll = new Button("Display All Courses");
        Button exitButton = new Button("Exit");
        rightBox.getChildren().addAll(toInput, toLayoutAll, exitButton);

        HBox fullLayout = new HBox(10);
        fullLayout.getChildren().addAll(listView, rightBox);

        Scene scene = new Scene(fullLayout, 595, 200);
        stage.setTitle("Course View");
        stage.setScene(scene);
        stage.show();

        toInput.setOnAction((event) -> {
            courseInputLayout(stage);
        });

        exitButton.setOnAction((event) -> {
            exitProgram();
        });

        toLayoutAll.setOnAction((event) -> {
            allCourseLayout(stage);
        });
        // Handle events
    }

    public void enterCourse(String dptNameUnparsed, String courseNumUnparsed, String courseNameUnparsed, String numCredUnparsed){
        if (dptNameUnparsed == null){
            Alert a = new Alert(Alert.AlertType.ERROR);
            a.setContentText("No Department Selected. Please select a department before continuing.");
            a.show();
            return;
        }
        if (courseNumUnparsed.length() == 0){
            Alert a = new Alert(Alert.AlertType.ERROR);
            a.setContentText("Course number not set. Please set a course number before continuing.");
            a.show();
            return;
        }
        if (courseNameUnparsed.length() == 0){
            Alert a = new Alert(Alert.AlertType.ERROR);
            a.setContentText("Course name not set. Please set a course name before continuing.");
            a.show();
            return;
        }
        if (numCredUnparsed.length() == 0){
            Alert a = new Alert(Alert.AlertType.ERROR);
            a.setContentText("Number of credits not set. Please set a number of credits before continuing.");
            a.show();
            return;
        }
        try {
            int numCred = Integer.parseInt(numCredUnparsed);
            int courseNum = Integer.parseInt(courseNumUnparsed);
            String dptCode = Course.getDepartmentCode(dptNameUnparsed);
            Course newCourse = new Course(dptCode, courseNameUnparsed, numCred, courseNum);
            allCourses.add(newCourse);
        } catch (Exception e) {
            Alert a = new Alert(Alert.AlertType.ERROR);
            a.setContentText(e.toString());
            a.show();
        }
    }

    public void exitProgram(){
        Alert a = new Alert(Alert.AlertType.CONFIRMATION);
        a.setHeaderText("Are you sure that you would like to exit?");
        a.setContentText("Choose your option");

        Optional<ButtonType> result = a.showAndWait();
        if (result.get() == ButtonType.OK){
            exit(0);
        }
    }
}
